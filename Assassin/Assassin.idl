/******************************************************************************
Project: Assassin
Description: Definition of Assassin Windows Runtime Interfaces.
File Name: Assassin.idl
License: The MIT License
******************************************************************************/

namespace Assassin
{
	enum TransferTaskStatus
    {
        Canceled  = 0,
        Completed = 1,
        Error     = 2,
        Paused    = 3,
        Queued    = 4,
        Running   = 5
    };

	[version(1.0)]
    [uuid(B70ACDED-7354-3082-BF73-D931D80C047B)]
    interface ITransferTask : IInspectable
		requires Windows.UI.Xaml.Data.INotifyPropertyChanged
	{
        // Gets the Guid string of the task.
		String Guid
		{
			get;
		};
			
		// Gets the URI which to download the file.
		Windows.Foundation.Uri SourceUri
		{
			get;
		};

		// Gets the file name which to download the file.
		String FileName
		{
			get;
		};

		// Gets the save file object which to download the file.
		Windows.Storage.IStorageFile SaveFile
		{
			get;
		};

		// Gets the save folder object which to download the file.
		Windows.Storage.IStorageFolder SaveFolder
		{
			get;
		};

		// The current status of the task.
		TransferTaskStatus Status
		{
			get;
		};

		// The total number of bytes received. This value does not include 
		// bytes received as response headers. If the task has restarted, 
		// this value may be smaller than in the previous progress report.
		UInt64 BytesReceived
		{
			get;
		};

		// The speed of bytes received in one second.
		UInt64 BytesReceivedSpeed
		{
			get;
		};

		// The remain time, in seconds.
		UInt64 RemainTime
		{
			get;
		};

		// The total number of bytes of data to download. If this number is
		// unknown, this value is set to 0.
		UInt64 TotalBytesToReceive
		{
			get;
		};

		// Pauses a download operation.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void Pause();

		// Resumes a paused download operation.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void Resume();

		// Cancels a download operation.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void Cancel();
    }

	typedef Windows.Foundation.Collections.IVectorView<ITransferTask> ITransferTaskVector;

	[version(1.0)]
    [uuid(976D09B5-65EE-39DE-9C00-26E47D6538D7)] 
	interface ITransferManager : IInspectable
		requires Windows.UI.Xaml.Data.INotifyPropertyChanged
	{
		// Gets the version of Nagisa.
		String Version
		{
			get;
		};

		// Gets or sets the filter to use for searching the task list.
		String SearchFilter
		{
			get;
			set;
		};

		// Gets the last used folder.
		Windows.Storage.IStorageFolder LastusedFolder
		{
			get;
		};

		// Gets or sets the default download folder.
		Windows.Storage.IStorageFolder DefaultFolder
		{
			get;
			set;
		};

		// Gets the total download bandwidth.
		UInt64 TotalDownloadBandwidth
		{
			get;
		};

		// Gets the total upload bandwidth.
		UInt64 TotalUploadBandwidth
		{
			get;
		};

		// Gets the task list.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   Returns an object which represents the task list.
		Windows.Foundation.IAsyncOperation<ITransferTaskVector> GetTasksAsync();

		// Add a task to the task list.
		// Parameters:
		//   SourceUri: The source uri object of task.
		//   DesiredFileName: The file name you desire.
		//   SaveFolder: The object of the folder which you want to save.
		// Return value:
		//   Returns an asynchronous object used to wait.
		Windows.Foundation.IAsyncAction AddTaskAsync(
			Windows.Foundation.Uri SourceUri,
			String DesiredFileName,
			Windows.Storage.IStorageFolder SaveFolder);

		// Removes a task to the task list.
		// Parameters:
		//   Task: The task object. 
		// Return value:
		//   Returns an asynchronous object used to wait.
		Windows.Foundation.IAsyncAction RemoveTaskAsync(
			ITransferTask Task);

		// Start all tasks.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void StartAllTasks();

		// Pause all tasks.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void PauseAllTasks();

		// Clears the task list.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   The function does not return a value.
		void ClearTaskList();
    }

	[version(1.0)]
    runtimeclass BackgroundWorker :
		Windows.ApplicationModel.Background.IBackgroundTask
    {
		BackgroundWorker();
    }

	[version(1.0)]
    runtimeclass TransferManagerFactory
    {
		TransferManagerFactory();
		
		// Creates a new TransferManager object.
		// Parameters:
		//   The function does not have parameters.
		// Return value:
		//   Returns a new TransferManager object.
		ITransferManager CreateInstance();
    }
}
