/*
 * PROJECT:   Assassin
 * FILE:      TransferManager.idl
 * PURPOSE:   Definition for the TransferManager
 *
 * LICENSE:   The MIT License
 *
 * DEVELOPER: Mouri_Naruto (Mouri_Naruto AT Outlook.com)
 */

namespace Assassin
{
    enum TransferTaskStatus
    {
        Canceled = 0,
        Completed = 1,
        Error = 2,
        Paused = 3,
        Queued = 4,
        Running = 5
    };

    [version(1.0)]
    [uuid(B70ACDED-7354-3082-BF73-D931D80C047B)]
    interface ITransferTask : IInspectable
        requires Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        // The Guid string of the task.
        String Guid { get; };

        // The URI which to download the file.
        Windows.Foundation.Uri SourceUri { get; };

        // The file name which to download the file.
        String FileName { get; };

        // The save file object which to download the file.
        Windows.Storage.IStorageFile SaveFile { get; };

        // The save folder object which to download the file.
        Windows.Storage.IStorageFolder SaveFolder { get; };

        // The current status of the task.
        TransferTaskStatus Status { get; };

        // The total number of bytes received. This value does not include
        // bytes received as response headers. If the task has restarted, this
        // value may be smaller than in the previous progress report.
        UInt64 BytesReceived { get; };

        // The speed of bytes received in one second.
        UInt64 BytesReceivedSpeed { get; };

        // The remain time, in seconds.
        UInt64 RemainTime { get; };

        // The total number of bytes of data to download. If this number is
        // unknown, this value is set to 0.
        UInt64 TotalBytesToReceive { get; };

        /**
         * Pauses a download operation.
         */
        void Pause();

        /**
         * Resumes a paused download operation.
         */
        void Resume();

        /**
         * Cancels a download operation.
         */
        void Cancel();
    }

    typedef Windows.Foundation.Collections.IVectorView<ITransferTask> ITransferTaskVector;

    [version(1.0)]
    runtimeclass TransferManager :
        Windows.Foundation.IClosable,
        Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        /**
         * Creates a new TransferManager object.
         *
         * @param EnableUINotify Enable the UI notify timer if true.
         */
        TransferManager(
            Boolean EnableUINotify);

        // The version of Nagisa.
        String Version{ get; };

        // The filter to use for searching the task list.
        String SearchFilter{ get; set; };

        // The last used folder.
        Windows.Storage.IStorageFolder LastusedFolder{ get; };

        // The default download folder.
        Windows.Storage.IStorageFolder DefaultFolder{ get; set; };

        // The total download bandwidth.
        UInt64 TotalDownloadBandwidth{ get; };

        // The total upload bandwidth.
        UInt64 TotalUploadBandwidth{ get; };

        /**
         * Gets the task list.
         *
         * @return The object which represents the task list.
         */
        Windows.Foundation.IAsyncOperation<ITransferTaskVector> GetTasksAsync();

        /**
         * Add a task to the task list.
         *
         * @param SourceUri The source uri object of task.
         * @param DesiredFileName The file name you desire.
         * @param SaveFolder The object of the folder which you want to save.
         * @return The asynchronous object used to wait.
         */
        Windows.Foundation.IAsyncAction AddTaskAsync(
            Windows.Foundation.Uri SourceUri,
            String DesiredFileName,
            Windows.Storage.IStorageFolder SaveFolder);

        /**
         * Removes a task to the task list.
         *
         * @param The task object.
         * @return The asynchronous object used to wait.
         */
        Windows.Foundation.IAsyncAction RemoveTaskAsync(
            ITransferTask Task);

        /**
         * Start all tasks.
         */
        void StartAllTasks();

        /**
         * Pause all tasks.
         */
        void PauseAllTasks();

        /**
         * Clears the task list.
         */
        void ClearTaskList();
    }
}
